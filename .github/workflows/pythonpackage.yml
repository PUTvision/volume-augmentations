name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.config.os }}

    env:
      CMAKE_GENERATOR: Ninja

    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-latest
            compiler: gcc
            version: "9"
          - os: ubuntu-latest
            compiler: clang
            version: "10"
          - os: windows-latest
            compiler: cl
          - os: windows-latest
            compiler: clang-cl
        python-version: [3.5, 3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main"
          sudo apt-get -y update
          sudo apt-get -y install ninja-build gfortran

          if [ "${{ matrix.config.compiler }}" = "gcc" ]; then
            sudo apt-get -y install g++-${{ matrix.config.version }}
            echo "::set-env name=CC::gcc-${{ matrix.config.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.config.version }}"
          else
            sudo apt-get install -y clang-${{ matrix.config.version }}
            echo "::set-env name=CC::clang-${{ matrix.config.version }}"
            echo "::set-env name=CXX::clang++-${{ matrix.config.version }}"
          fi
        elif [ "$RUNNER_OS" == "Windows" ]; then
          choco install ninja

          echo "::set-env name=CC::${{ matrix.config.compiler }}"
          echo "::set-env name=CXX::${{ matrix.config.compiler }}"
        fi

        python -m pip install wheel
      shell: bash

    - name: Cache VCPKG
      uses: actions/cache@v1
      env:
        cache-name: cache-vcpkg
      with:
        path: vcpkg
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('setup_vcpkg.sh') }}

    - name: Setup VCPKG
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        ./setup_vcpkg.sh
      shell: bash

    - name: Build
      run: |
        VCPKG_ROOT="$(pwd)/vcpkg" python setup.py bdist_wheel
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: wheels
        path: dist
