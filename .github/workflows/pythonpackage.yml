name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.config.os }}

    env:
      CMAKE_GENERATOR: Ninja

    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-latest
            compiler: gcc
            version: "9"
          - os: ubuntu-latest
            compiler: clang
            version: "9"
          - os: windows-latest
            compiler: cl
          # - os: windows-latest
          #   compiler: clang-cl
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2

    - name: Cache MKL (windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v1
      id: mkl-cache
      with:
        path: ~/mkl/installed
        key: mkl-2020.1.1

    - name: Download MKL (Windows)
      if: runner.os == 'Windows' && steps.mkl-cache.outputs.cache-hit != 'true'
      run: |
        mkdir ~/mkl/
        cd ~/mkl/
        Invoke-WebRequest "${{ secrets.MKL_DOWNLOAD_LINK }}" -OutFile mkl.zip
        ls
        unzip mkl.zip -d installed

    - name: Configure MKL  (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "::set-env name=MKLROOT::~/mkl/installed/compilers_and_libraries_2020.1.216/windows/mkl"
        $env:PATH += ";~/mkl/installed/compilers_and_libraries_2020.1.216/windows/compiler/lib/intel64_win"
        $env:PATH += ";~/mkl/installed/compilers_and_libraries_2020.1.216/windows/redist/intel64_win/compiler"
        $env:PATH += ";~/mkl/installed/compilers_and_libraries_2020.1.216/windows/redist/intel64_win/mkl"
        $env:PATH += ";~/mkl/installed/compilers_and_libraries_2020.1.216/windows/redist/intel64_win/tbb"
        echo "::set-env name=PATH::$env:PATH"
        ls ~/mkl/installed/compilers_and_libraries_2020.1.216/windows/mkl

#    - name: Set up Rust
#      uses: actions-rs/toolchain@v1
#      with:
#        toolchain: nightly
#        override: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        wget -qO - https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB | sudo apt-key add -
        sudo add-apt-repository "deb https://apt.repos.intel.com/mkl all main"
        sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
        sudo apt-get -y update
        sudo apt-get -y install ninja-build gfortran clang-tidy
        sudo apt-get -y install intel-mkl-64bit-2020.0-088

        echo "::set-env name=MKLROOT::/opt/intel/mkl"

        if [ "${{ matrix.config.compiler }}" = "gcc" ]; then
          sudo apt-get -y install g++-${{ matrix.config.version }}
          echo "::set-env name=CC::gcc-${{ matrix.config.version }}"
          echo "::set-env name=CXX::g++-${{ matrix.config.version }}"
        else
          sudo apt-get install -y clang-${{ matrix.config.version }} libc++-${{ matrix.config.version }}-dev libc++abi-${{ matrix.config.version }}-dev
          echo "::set-env name=CC::clang-${{ matrix.config.version }}"
          echo "::set-env name=CXX::clang++-${{ matrix.config.version }}"
        fi

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "::set-env name=VCPKG_KEEP_ENV_VARS::MKLROOT"
        choco install ninja
        # choco install llvm --version=9.0.1

        # $env:PATH += ";C:\Program Files\LLVM\bin"
        # echo "::set-env name=PATH::$env:PATH"

        echo "::set-env name=CC::${{ matrix.config.compiler }}"
        echo "::set-env name=CXX::${{ matrix.config.compiler }}"

        & .github\workflows\vsenv.bat -arch=x64 -host_arch=x64

    - name: Install dependencies (common)
      run: |
        python -m pip install wheel pytest pytest-benchmark
      shell: bash

    - name: Cache VCPKG
      uses: actions/cache@v1
      id: cache-vcpkg
      with:
        path: ${{ github.workspace }}/vcpkg
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('setup_vcpkg.sh') }}

    - name: Setup VCPKG
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        cd "${{ github.workspace }}"
        if [ "$RUNNER_OS" == "Windows" ]; then
          export VCPKG_KEEP_ENV_VARS="MKLROOT"
          ./setup_vcpkg.sh --triplet x64-windows --overlay-ports=../tools/vcpkg_ports
        else
          ./setup_vcpkg.sh --overlay-ports=${{ github.workspace }}/tools/vcpkg_ports
        fi
      shell: bash

#    - name: Cache Cargo
#      uses: actions/cache@v1
#      id: cache-cargo
#      with:
#        path: build/va_rs
#        key: ${{ runner.os }}-cargo-${{ hashFiles('va_rs/Cargo.toml') }}

#    - name: Setup Cargo
#      if: steps.cache-cargo.outputs.cache-hit != 'true'
#      run: |
#        echo "MKLROOT: $MKLROOT"
#        cargo check --release -Z features=itarget --manifest-path va_rs/Cargo.toml

    - name: Build
      run: |
        python setup.py bdist_wheel
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: wheels
        path: dist

    - name: Test with pytest
      run: |
        pip install dist/*.whl
        pytest va_py
